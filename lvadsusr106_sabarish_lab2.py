# -*- coding: utf-8 -*-
"""lvadsusr106_Sabarish_Lab2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sq4TCCIWT-JXfqgp-5KmCrAp006qgd0g
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import f1_score
from sklearn.metrics import recall_score
from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

booking = pd.read_csv('/content/booking.csv')
booking_df = pd.DataFrame(booking)
print(booking_df.head())

#checking null values
booking_df.isnull().sum()

#checking duplicates and dropping duplicates
booking_df.duplicated().sum()

#visualize outliers
sns.boxplot(booking_df['average price'])
plt.show()

#checking outliers and removing outliers for charges column
q1 = booking_df['average price'].quantile(0.25)
q3 = booking_df['average price'].quantile(0.75)
IQR = q3 - q1

l_limit = q1 - (1.5*IQR)
u_limit = q3 + (1.5*IQR)
cleaned_book_df = booking_df[~((booking_df['average price'] < l_limit) | (booking_df['average price'] > u_limit))]
print(cleaned_book_df)

#encode categorical to numerical
lbl = LabelEncoder()
book_df = cleaned_book_df.copy()
book_df['type of meal'] = lbl.fit_transform(book_df['type of meal'])
book_df['room type'] = lbl.fit_transform(book_df['room type'])
book_df['market segment type'] = lbl.fit_transform(book_df['market segment type'])
book_df['booking status'] = lbl.fit_transform(book_df['booking status'])
print(book_df.head())

#model training and evaluation
X = book_df[['number of adults', 'number of children', 'number of weekend nights', 'number of week nights',
             'type of meal', 'room type', 'lead time', 'market segment type', 'average price']]
y = book_df['booking status']

model = DecisionTreeClassifier()
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .3)

model = model.fit(X_train, y_train)
pred = model.predict(X_test)
accuracy = accuracy_score(y_test, pred)
print('Decision Tree Accuracy :',accuracy)
f1 = f1_score(y_test, pred)
print('Decision Tree F1-Score :',f1)
precision = precision_score(y_test, pred)
print('Decision Tree Precision :',precision)
recall = recall_score(y_test, pred)
print('Decision Tree Recall_score :',recall)
cm = confusion_matrix(y_test, pred)
print('Decision Tree Confusion Matrix : \n',cm)