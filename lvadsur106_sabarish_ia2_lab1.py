# -*- coding: utf-8 -*-
"""lvadsur106_Sabarish_IA2_Lab1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bqlOULdZLhOg8v20jMIluMTIWP1P0ahc
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error, precision_score, f1_score, recall_score, confusion_matrix, silhouette_score, davies_bouldin_score, calinski_harabasz_score
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier

#reading data from csv
wine_data = pd.read_csv('/content/winequality-red.csv')
wine_df = pd.DataFrame(wine_data)
print(wine_df.head())

#checking null values and forward filling the values
wine_df.isnull().sum()
filled_wine_df = wine_df.fillna(method='ffill')
print(filled_wine_df.head())

#checking duplicates and removing duplicates
filled_wine_df.duplicated().sum()
filled_wine_df.drop_duplicates(inplace = True)

#checking for outliers
sns.boxplot(filled_wine_df)
plt.xticks(rotation=90)
plt.show()

q1 = filled_wine_df['total sulfur dioxide'].quantile(0.25)
q3 = filled_wine_df['total sulfur dioxide'].quantile(0.75)
IQR = q3 - q1

l_limit = q1 - (1.5*IQR)
u_limit = q3 + (1.5*IQR)

wine_df_ = filled_wine_df[(filled_wine_df['total sulfur dioxide']>l_limit) & (filled_wine_df['total sulfur dioxide']<u_limit)]
print(wine_df_)

#correlation between variables
correl = wine_df_.corr()
print(correl)
sns.heatmap(data=correl)

#data transformation
def transform_att():
    for i in wine_df_['quality']:
        if((i >= 3) and (i <= 6)):
            wine_df_.loc[wine_df_['quality'] == i, 'wine_quality'] = 0
        elif((i > 6)):
            wine_df_.loc[wine_df_['quality'] == i, 'wine_quality'] = 1
    print(wine_df_)

transform_att()

#model training and testing
X = wine_df_[['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides',
              'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol']]
y = wine_df_['wine_quality']

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3)

model = KNeighborsClassifier(n_neighbors = 3)
model = model.fit(X_train, y_train)
y_pred = model.predict(X_test)

accuracy = accuracy_score(y_pred,y_test)
print(f'Accuracy : {accuracy}')
precision = precision_score(y_pred,y_test)
print(f'Precision : {precision}')
recall = recall_score(y_pred,y_test)
print(f'Recall : {recall}')