# -*- coding: utf-8 -*-
"""lvadsur106_Sabarish_IA2_Lab2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TcAIxor58yAyl5yebBGU0jn3fNnZTc_H
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error, precision_score, f1_score, recall_score, confusion_matrix, silhouette_score, davies_bouldin_score, calinski_harabasz_score
import time
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
from sklearn.cluster import KMeans

#reading data from csv
mall_data = pd.read_csv('/content/Mall_Customers.csv')
mall_df = pd.DataFrame(mall_data)
print(mall_df)

#checking null values and forward filling the values
mall_df.isnull().sum()
filled_mall_df = mall_df.fillna(method='ffill')

#checking duplicates and removing duplicates
filled_mall_df.duplicated().sum()

#checking for outliers
sns.boxplot(filled_mall_df)
plt.xticks(rotation=90)
plt.show()

q1 = filled_mall_df['Annual Income (k$)'].quantile(0.25)
q3 = filled_mall_df['Annual Income (k$)'].quantile(0.75)
IQR = q3 - q1

l_limit = q1 - (1.5*IQR)
u_limit = q3 + (1.5*IQR)

mall_df_ = filled_mall_df[(filled_mall_df['Annual Income (k$)']>l_limit) & (filled_mall_df['Annual Income (k$)']<u_limit)]
print(mall_df_)

#correlation between variables
correl = mall_df_.corr()
print(correl)
sns.heatmap(data=correl)

#data model
X = mall_df_[['Annual Income (k$)', 'Spending Score (1-100)']]
scalar = MinMaxScaler()
mall_df_[['Annual Income (k$)', 'Spending Score (1-100)' ]] = scalar.fit_transform(mall_df_[['Annual Income (k$)','Spending Score (1-100)']])

model = KMeans(n_clusters=6)
model = model.fit(X)
centroids = model.cluster_centers_
plt.scatter(mall_df_['Annual Income (k$)'],mall_df_['Spending Score (1-100)'],c=model.labels_)
plt.scatter(centroids[:,0],centroids[:,1])
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.legend()
plt.show()

#silhouette
silhouette = silhouette_score(X,model.labels_)
print(f'Silhouette Score: {silhouette}')