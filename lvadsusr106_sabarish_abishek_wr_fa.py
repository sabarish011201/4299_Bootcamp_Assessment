# -*- coding: utf-8 -*-
"""LVADSUSR106_Sabarish_Abishek_WR_FA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZdDg4zJBSsHkQPTzMtRV8Rjcd4G_x-dB
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statistics

#1
data = pd.read_csv('/content/sample_data/Walmart_Dataset Python_Final_Assessment.csv')
df = pd.DataFrame(data)
df.info()
df.describe()

#2
print(df.isnull().sum())
print('\n')
print('Duplicated Data Entry :',df.duplicated().sum())

#3
df.describe()

#3
def sales_column():
  print("Sales Column : ")
  median_sales = statistics.median(df['Sales'])
  mode_sales = statistics.mode(df['Sales'])
  variance_sales = statistics.variance(df['Sales'])
  print(f'Sales_Median : {median_sales}')
  print(f'Sales_Mode : {mode_sales}')
  print(f'Sales_Variance : {variance_sales}')
sales_column()
print('\n')

def quantity_column():
  print("Quantity Column : ")
  median_quantity = statistics.median(df['Quantity'])
  mode_quantity = statistics.mode(df['Quantity'])
  variance_quantity = statistics.variance(df['Quantity'])
  print(f'Quantity_Median : {median_quantity}')
  print(f'Quantity_Mode : {mode_quantity}')
  print(f'Quantity_Variance : {variance_quantity}')
quantity_column()
print('\n')

def profit_column():
  print("Profit Column : ")
  median_profit = statistics.median(df['Profit'])
  mode_profit = statistics.mode(df['Profit'])
  variance_profit = statistics.variance(df['Profit'])
  print(f'Profit_Median : {median_profit}')
  print(f'Profit_Mode : {mode_profit}')
  print(f'Profit_Variance : {variance_profit}')
profit_column()

#4
#Pie Chart
category = df.groupby('Category')['Sales'].sum().reset_index().rename(columns={'Sales':'Total Sales'})
plt.figure(figsize=(10,10))
plt.pie(category['Total Sales'], autopct='%0.1f%%')
plt.legend(df['Category'])
plt.title('Sales Across Different Category')
plt.show()

#Bar Plot
category = df.groupby('Category')['Quantity'].sum().reset_index().rename(columns={'Quantity':'Total Quantity'})
category1 = category[0:5]
plt.bar(category1['Category'],category1['Total Quantity'], color='skyblue', edgecolor='black')
plt.title('Quantity Across Different Category')
plt.grid(True, alpha=0.5)
plt.show()

#Scatter Plot
df1 = df.groupby('Order ID')['Quantity'].sum().reset_index().rename(columns={'Quantity':'Total Quantity'})
fig_data = df1[0:5]
sns.scatterplot(data= fig_data, x=fig_data['Order ID'], y=fig_data['Total Quantity'], s=100)
plt.grid(True)
plt.show()

#HistPlot
category = df.groupby('Category')['Quantity'].sum().reset_index().rename(columns={'Quantity':'Total Quantity'})
category1 = category[0:5]
sns.histplot(data=category1, x=category1['Category'],y=category1['Total Quantity'], bins=5)
plt.show()

#5
correlation_df = df.corr()
print(correlation_df)
sns.heatmap(correlation_df)
plt.show()

"""Here Sales and Profit are positively correlated to each other and have some high correlation between them."""

#6
sns.boxplot(data=df, palette='Set1')
plt.show()
print('\n')
print('Sales Anamoly')
sales_anamoly = df[df['Sales']>12500]
print(sales_anamoly[['Order ID','Order Date','EmailID','Sales']])
print('\n')
print('Profit Anamoly')
profit_anamoly = df[(df['Profit']>5000) & (df['Profit']>(-2000))]
print(profit_anamoly[['Order ID','Order Date','EmailID','Profit']])

"""Box plot can be used for anamoly detection points getting plotted far away from the actual data points are considered as anamoly."""

#7 Trend Analysis
#i
df['year'] = pd.DatetimeIndex(df['Order Date']).year
columns = ['Sales','Profit']
sales_profit = df.groupby('year')[columns].agg({'Sales':'sum','Profit':'sum'})
sales_profit.plot()
plt.show()

"""The Profit in the Sales over the years has increased gradually whereas Sales has dropped in 2012 and has increased gradually from then."""

#7 Trend Analysis
#ii
product = df.groupby(['year','Category'])['Sales'].sum().reset_index().rename(columns={'Sales':'Total Sales'})
product.set_index('year', inplace=True)
product.plot(kind='hist')
plt.show()

#7 Customer Analysis
#i
columns=['Sales','Order ID']
total_order = df.groupby('Order ID')[columns].agg({'Order ID': 'count', 'Sales': 'sum'})
sorted_df = total_order.sort_values(by=['Sales'], ascending=False)
print(sorted_df[0:5])

"""#7 Comprehensive Analytics i
Strategies like Check stocks for products that have a high sale rate. When a product is in demand the quantity of the product must be stocked to maintain the high sale rate. A threshold for the stocks remaining can be implemented when the quantity reaches threshold we need to stock the product.
"""

#7 Comprehensive Analytics i
category = df.groupby('Category')['Quantity'].sum().reset_index().rename(columns={'Quantity':'Total Quantity'})
threshold = 2
filtered = category[category['Total Quantity']<=100]
print(filtered)

"""#7 Comprehensive Analytics ii
Factors such as total sales of a product, profit acquired by the sale, total availabilty and total sold quantity all contribute to the geographical distribution of sales. These insights can be used to find the geography where total sales and quantity is low and target that geography and do necessary measures to boost the sales in that geography. And also a geography with high sales can be offered discounts to maintain or improve the sales and also maintain the stock availability.
"""

# Comprehensive Analytics ii
geography = df.groupby('Geography')['Sales'].sum().reset_index().rename(columns={'Sales':'Total Sales'})
print(geography)

"""#7 Comprehensive Analytics iii
HIGH VALUE CUSTOMERS are customers who have high total sales amount and also frequently places orders. These customers can be stimulated more to buy products by offering discounts to the high value customers. This also enables other customers to buy more products. Another way is a loyalty program. High Value Customers can be given loyalty programs which offers special discounts for them.
"""

# Comprehensive Analytics iii (LOYALTY PROGRAM FOR TOP 5 CUSTOMERS)
columns=['Sales','EmailID']
total_order = df.groupby('EmailID')[columns].agg({'EmailID': 'count', 'Sales': 'sum'})
sorted_df = total_order.sort_values(by=['Sales'], ascending=False)
print(sorted_df[0:5])